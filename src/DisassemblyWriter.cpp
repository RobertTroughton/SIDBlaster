// ==================================
//             SIDBlaster
//
//  Raistlin / Genesis Project (G*P)
// ==================================
#include "DisassemblyWriter.h"
#include "SIDLoader.h"
#include "cpu6510.h"

#include <algorithm>
#include <iostream>
#include <queue>
#include <set>

namespace sidblaster {

    /**
     * @brief Constructor for DisassemblyWriter
     *
     * Initializes the disassembly writer with references to the CPU, SID loader,
     * memory analyzer, label generator, and code formatter.
     *
     * @param cpu Reference to the CPU
     * @param sid Reference to the SID loader
     * @param analyzer Reference to the memory analyzer
     * @param labelGenerator Reference to the label generator
     * @param formatter Reference to the code formatter
     */
    DisassemblyWriter::DisassemblyWriter(
        const CPU6510& cpu,
        const SIDLoader& sid,
        const MemoryAnalyzer& analyzer,
        const LabelGenerator& labelGenerator,
        const CodeFormatter& formatter)
        : cpu_(cpu),
        sid_(sid),
        analyzer_(analyzer),
        labelGenerator_(labelGenerator),
        formatter_(formatter) {
        // No longer need to check for includePlayer_ configuration
    }

    /**
     * @brief Generate an assembly file
     *
     * Creates a complete assembly language file for the disassembled SID,
     * including header comments, constants, and code.
     *
     * @param filename Output filename
     * @param sidLoad New SID load address
     * @param sidInit New SID init address
     * @param sidPlay New SID play address
     * @return Number of unused bytes removed
     */
    int DisassemblyWriter::generateAsmFile(
        const std::string& filename,
        u16 sidLoad,
        u16 sidInit,
        u16 sidPlay) {

        util::Logger::info("Generating assembly file: " + filename);

        // Open the output file
        std::ofstream file(filename);
        if (!file) {
            util::Logger::error("Failed to open output file: " + filename);
            return 0;
        }

        // Write file header
        file << "//; ------------------------------------------\n";
        file << "//; Generated by " << SIDBLASTER_VERSION << "\n";
        file << "//; \n";
        file << "//; Name: " << sid_.getHeader().name << "\n";
        file << "//; Author: " << sid_.getHeader().author << "\n";
        file << "//; Copyright: " << sid_.getHeader().copyright << "\n";
        file << "//; ------------------------------------------\n\n";

        // Output addresses as constants
        file << ".const SIDLoad = $" << util::wordToHex(sidLoad) << "\n";

        // Output hardware registers as constants
        outputHardwareConstants(file);

        // Output zero page defines
        emitZPDefines(file);

        // Disassemble to file
        int unusedByteCount = disassembleToFile(file);

        // Output unused byte count
        file << "//; " << unusedByteCount << " unused bytes zeroed out\n\n";

        file.close();

        return unusedByteCount;
    }

    /**
     * @brief Add a relocation byte
     *
     * Registers a byte as a relocation point (address reference).
     *
     * @param address Address of the byte
     * @param info Relocation information
     */
    void DisassemblyWriter::addRelocationByte(
        u16 address,
        const RelocationInfo& info) {

        relocationBytes_[address] = info;
    }

    /**
     * @brief Add an indirect memory access
     *
     * Records information about an indirect memory access for later analysis.
     * Enhanced to collect more detailed information about pointer usage.
     *
     * @param pc Program counter
     * @param zpAddr Zero page address
     * @param effectiveAddr Effective address
     */
    void DisassemblyWriter::addIndirectAccess(u16 pc, u8 zpAddr, u16 effectiveAddr) {
        // Get the sources of the ZP variables
        const auto& lowSource = cpu_.getWriteSourceInfo(zpAddr);
        const auto& highSource = cpu_.getWriteSourceInfo(zpAddr + 1);

        // Get the last instructions that wrote to these ZP addresses
        u16 lastWriteLow = cpu_.getLastWriteTo(zpAddr);
        u16 lastWriteHigh = cpu_.getLastWriteTo(zpAddr + 1);

        // Track information even if not loaded from memory
        IndirectAccessInfo info;
        info.instructionAddress = pc;
        info.zpAddr = zpAddr;
        info.lastWriteLow = lastWriteLow;
        info.lastWriteHigh = lastWriteHigh;
        info.effectiveAddress = effectiveAddr;

        // Capture source addresses when available
        if (lowSource.type == RegisterSourceInfo::SourceType::Memory) {
            info.sourceLowAddress = lowSource.address;
        }

        if (highSource.type == RegisterSourceInfo::SourceType::Memory) {
            info.sourceHighAddress = highSource.address;
        }

        indirectAccesses_.push_back(info);
    }

    /**
     * @brief Output hardware constants to the assembly file
     *
     * Identifies hardware components (like SID chips) that are accessed
     * in the code and generates appropriate constant definitions.
     *
     * @param file Output stream
     */
    void DisassemblyWriter::outputHardwareConstants(std::ofstream& file) {
        // Find all accessed hardware components

        // SID detection
        std::set<u16> sidBases;
        for (u16 addr = 0xD400; addr <= 0xD7FF; addr++) {
            if (analyzer_.getMemoryType(addr) & (MemoryType::Accessed)) {
                u16 base = addr & 0xFFE0; // Align to 32 bytes for SID
                sidBases.insert(base);
            }
        }

        // Ensure at least one SID is always present
        if (sidBases.empty()) {
            sidBases.insert(0xD400);
        }

        // Register SID bases
        int sidIndex = 0;
        for (u16 base : sidBases) {
            const std::string name = "SID" + std::to_string(sidIndex);

            // Register with label generator
            const_cast<LabelGenerator&>(labelGenerator_).addHardwareBase(
                HardwareType::SID, base, sidIndex, name);

            // Output to assembly file
            file << ".const " << name << " = $" << util::wordToHex(base) << "\n";

            sidIndex++;
        }

        // Future hardware component detection can be added here:
        // VIC-II detection (0xD000-0xD3FF)
        // CIA detection (0xDC00-0xDCFF for CIA1, 0xDD00-0xDDFF for CIA2)
        // etc.

        file << "\n";
    }

    /**
     * @brief Output zero page definitions to the assembly file
     *
     * Identifies zero page variables used by the code and generates
     * appropriate constant definitions.
     *
     * @param file Output stream
     */
    void DisassemblyWriter::emitZPDefines(std::ofstream& file) {
        // Collect all used zero page addresses
        std::set<u8> usedZP;
        for (u16 addr = 0x0000; addr <= 0x00FF; ++addr) {
            if (analyzer_.getMemoryType(addr) & MemoryType::Accessed) {
                usedZP.insert(static_cast<u8>(addr));
            }
        }

        if (usedZP.empty()) {
            return;
        }

        // Convert to vector for sorting
        std::vector<u8> zpList(usedZP.begin(), usedZP.end());
        std::sort(zpList.begin(), zpList.end());

        // Calculate ZP base
        u8 zpBase = 0xFF - static_cast<u8>(zpList.size()) + 1;

        // Output ZP defines
        file << ".const ZP_BASE = $" << util::byteToHex(zpBase) << "\n";
        for (size_t i = 0; i < zpList.size(); ++i) {
            std::string varName = "ZP_" + std::to_string(i);
            file << ".const " << varName << " = ZP_BASE + " << i << " // $" << util::byteToHex(zpList[i]) << "\n";

            // Add to label generator
            const_cast<LabelGenerator&>(labelGenerator_).addZeroPageVar(zpList[i], varName);
        }

        file << "\n";
    }

    /**
     * @brief Disassemble to the output file
     *
     * Performs the actual disassembly writing to the file, handling code,
     * data, and labels appropriately.
     *
     * @param file Output stream
     * @return Number of unused bytes removed
     */
    int DisassemblyWriter::disassembleToFile(std::ofstream& file) {
        u16 pc = sid_.getLoadAddress();
        file << "\n* = SIDLoad\n\n";

        const u16 sidEnd = sid_.getLoadAddress() + sid_.getDataSize();
        int unusedByteCount = 0;

        while (pc < sidEnd) {
            // Check if we need to output a label
            const std::string label = labelGenerator_.getLabel(pc);
            if (!label.empty() && (analyzer_.getMemoryType(pc) & MemoryType::Code)) {
                file << label << ":\n";
            }

            // Check if this is code or data
            if (analyzer_.getMemoryType(pc) & MemoryType::Code) {
                const u16 startPc = pc;
                const std::string line = formatter_.formatInstruction(pc);

                file << util::padToColumn(line, 96);
                file << " //; $" << util::wordToHex(startPc) << " - "
                    << util::wordToHex(pc - 1) << "\n";
            }
            else if (analyzer_.getMemoryType(pc) & MemoryType::Data) {
                // Convert RelocationInfo to map of RelocEntry format expected by formatter
                std::map<u16, struct RelocEntry> formatterRelocBytes;
                for (const auto& [addr, info] : relocationBytes_) {
                    RelocEntry entry;
                    entry.effectiveAddr = info.effectiveAddr;
                    entry.type = (info.type == RelocationInfo::Type::Low) ?
                        RelocEntry::Type::Low : RelocEntry::Type::High;
                    formatterRelocBytes[addr] = entry;
                }

                // Format data bytes
                unusedByteCount += formatter_.formatDataBytes(
                    file,
                    pc,
                    sid_.getOriginalMemory(),
                    sid_.getOriginalMemoryBase(),
                    sidEnd,
                    formatterRelocBytes,
                    analyzer_.getMemoryTypes());
            }
            else {
                // Unknown memory type, just increment PC
                ++pc;
            }
        }

        return unusedByteCount;
    }

    /**
     * @brief Process all recorded indirect accesses
     *
     * Analyzes indirect memory access patterns to identify address references
     * and pointer tables. This enhanced version looks deeper at memory access
     * patterns to identify more complex pointer references.
     */
    void DisassemblyWriter::processIndirectAccesses() {
        if (indirectAccesses_.empty()) {
            util::Logger::debug("No indirect accesses to process");
            return;
        }

        // Step 0: Deduplicate indirect accesses to make analysis clearer
        std::map<std::pair<u8, u16>, IndirectAccessInfo> uniqueAccesses;
        for (const auto& access : indirectAccesses_) {
            // Use ZP address and target address as the key
            auto key = std::make_pair(access.zpAddr, access.effectiveAddress);
            uniqueAccesses[key] = access;
        }

        // Modify RelocationInfo to support multiple target addresses
        struct ExtendedRelocationInfo {
            std::set<u16> effectiveAddrs;  // All possible target addresses
            RelocationInfo::Type type;     // Low or high byte
        };

        // Use a map for extended relocation info during processing
        std::map<u16, ExtendedRelocationInfo> extendedRelocationInfo;

        // Step 1: Process direct sources of indirect addressing
        for (const auto& [key, access] : uniqueAccesses) {
            // Get the sources of the ZP variables (original direct sources)
            u16 zpLow = access.zpAddr;
            u16 zpHigh = access.zpAddr + 1;
            u16 targetAddr = access.effectiveAddress;

            // Track sources of ZP low byte
            if (cpu_.getWriteSourceInfo(zpLow).type == RegisterSourceInfo::SourceType::Memory) {
                u16 sourceLow = cpu_.getWriteSourceInfo(zpLow).address;

                // Add to our extended relocation info - this allows multiple targets per source
                extendedRelocationInfo[sourceLow].effectiveAddrs.insert(targetAddr);
                extendedRelocationInfo[sourceLow].type = RelocationInfo::Type::Low;

                // Mark for subdivision
                const_cast<LabelGenerator&>(labelGenerator_).addPendingSubdivisionAddress(sourceLow);
            }

            // Track sources of ZP high byte
            if (cpu_.getWriteSourceInfo(zpHigh).type == RegisterSourceInfo::SourceType::Memory) {
                u16 sourceHigh = cpu_.getWriteSourceInfo(zpHigh).address;

                // Add to our extended relocation info - this allows multiple targets per source
                extendedRelocationInfo[sourceHigh].effectiveAddrs.insert(targetAddr);
                extendedRelocationInfo[sourceHigh].type = RelocationInfo::Type::High;

                // Mark for subdivision
                const_cast<LabelGenerator&>(labelGenerator_).addPendingSubdivisionAddress(sourceHigh);
            }
        }

        // Get memory data flow from CPU
        const auto& dataFlow = cpu_.getMemoryDataFlow();

        // Step 2: Use memory data flow to find indirect sources
        if (!dataFlow.memoryWriteSources.empty()) {
            // We'll use a queue to process all sources in breadth-first order
            using ProcessItem = std::pair<u16, RelocationInfo::Type>;  // addr, type
            std::queue<ProcessItem> toProcess;
            std::set<ProcessItem> processed;  // Track what we've already processed

            // Start with known direct sources
            for (const auto& [addr, info] : extendedRelocationInfo) {
                toProcess.push({ addr, info.type });
            }

            // Process the queue
            while (!toProcess.empty()) {
                auto [currentAddr, type] = toProcess.front();
                toProcess.pop();

                // Skip if already processed
                if (processed.count({ currentAddr, type }) > 0) {
                    continue;
                }
                processed.insert({ currentAddr, type });

                // Look for sources of this address
                auto it = dataFlow.memoryWriteSources.find(currentAddr);
                if (it != dataFlow.memoryWriteSources.end()) {
                    util::Logger::debug("Found " + std::to_string(it->second.size()) +
                        " sources for address $" + util::wordToHex(currentAddr));

                    for (const auto& sourceInfo : it->second) {
                        // Find targets for the current address
                        auto infoIt = extendedRelocationInfo.find(currentAddr);
                        if (infoIt != extendedRelocationInfo.end()) {
                            // Copy all target addresses to this source
                            for (u16 targetAddr : infoIt->second.effectiveAddrs) {
                                extendedRelocationInfo[sourceInfo.address].effectiveAddrs.insert(targetAddr);
                                extendedRelocationInfo[sourceInfo.address].type = type;

                                util::Logger::debug("Found indirect " +
                                    std::string(type == RelocationInfo::Type::High ? "high" : "low") +
                                    " byte source: $" + util::wordToHex(sourceInfo.address) +
                                    " -> $" + util::wordToHex(currentAddr) +
                                    " for target $" + util::wordToHex(targetAddr));

                                // Mark for subdivision
                                const_cast<LabelGenerator&>(labelGenerator_).addPendingSubdivisionAddress(sourceInfo.address);
                            }

                            // Queue this source for further processing
                            toProcess.push({ sourceInfo.address, type });
                        }
                    }
                }
            }
        }

        // Step 3: Convert extended relocation info to standard relocation bytes
        // For each source address with multiple targets, we need to pick one target
        // Here we'll use the first target found (lowest address)
        for (const auto& [addr, info] : extendedRelocationInfo) {
            if (!info.effectiveAddrs.empty()) {
                // Use the lowest target address
                u16 targetAddr = *info.effectiveAddrs.begin();

                // Add to standard relocation bytes
                relocationBytes_[addr] = {
                    targetAddr,
                    info.type
                };
            }
        }

        // If we still have no relocation bytes, fall back to our previous method for simple cases
        if (relocationBytes_.empty()) {

            for (const auto& [key, access] : uniqueAccesses) {
                // Skip if source addresses are outside the original memory
                u16 zpLow = access.zpAddr;
                u16 zpHigh = access.zpAddr + 1;
                u16 lastWriteLow = cpu_.getLastWriteTo(zpLow);
                u16 lastWriteHigh = cpu_.getLastWriteTo(zpHigh);

                // Get the original memory range
                const auto& original = sid_.getOriginalMemory();
                const u16 base = sid_.getOriginalMemoryBase();

                if (lastWriteLow >= base && lastWriteLow < base + original.size()) {
                    relocationBytes_[lastWriteLow] = {
                        access.effectiveAddress,
                        RelocationInfo::Type::Low
                    };
                }

                if (lastWriteHigh >= base && lastWriteHigh < base + original.size()) {
                    relocationBytes_[lastWriteHigh] = {
                        access.effectiveAddress,
                        RelocationInfo::Type::High
                    };
                }
            }
        }
    }

} // namespace sidblaster